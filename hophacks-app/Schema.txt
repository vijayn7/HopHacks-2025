-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.badges (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  slug text NOT NULL UNIQUE,
  name text NOT NULL,
  criteria_json jsonb NOT NULL DEFAULT '{}'::jsonb,
  CONSTRAINT badges_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_tags (
  event_id uuid NOT NULL,
  tag_id uuid NOT NULL,
  CONSTRAINT event_tags_pkey PRIMARY KEY (event_id, tag_id),
  CONSTRAINT event_tags_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT event_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  org_id uuid NOT NULL,
  title text NOT NULL,
  cause USER-DEFINED NOT NULL,
  description text,
  starts_at timestamp with time zone NOT NULL,
  ends_at timestamp with time zone NOT NULL,
  lat double precision,
  lng double precision,
  geog USER-DEFINED DEFAULT 
CASE
    WHEN ((lat IS NOT NULL) AND (lng IS NOT NULL)) THEN (st_setsrid(st_makepoint(lng, lat), 4326))::geography
    ELSE NULL::geography
END,
  capacity integer CHECK (capacity IS NULL OR capacity >= 0),
  qr_secret uuid NOT NULL DEFAULT uuid_generate_v4(),
  created_by uuid NOT NULL,
  is_published boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  image_url text,
  location_name text,
  address text,
  location_notes text,
  domain USER-DEFINED NOT NULL DEFAULT 'COMMUNITY'::cause_domain,
  activity USER-DEFINED NOT NULL DEFAULT 'GENERAL'::event_activity,
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT events_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.group_members (
  group_id uuid NOT NULL,
  user_id uuid NOT NULL,
  is_admin boolean DEFAULT false,
  role text DEFAULT 'member'::text,
  joined_at timestamp with time zone DEFAULT now(),
  CONSTRAINT group_members_pkey PRIMARY KEY (group_id, user_id),
  CONSTRAINT group_members_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.groups(id),
  CONSTRAINT group_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.groups (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  invite_code text NOT NULL DEFAULT encode(gen_random_bytes(6), 'base64'::text) UNIQUE,
  created_by uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  description text,
  monthly_goal integer DEFAULT 10000,
  CONSTRAINT groups_pkey PRIMARY KEY (id),
  CONSTRAINT groups_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.joins (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid NOT NULL,
  user_id uuid NOT NULL DEFAULT auth.uid(),
  status USER-DEFINED NOT NULL DEFAULT 'joined'::join_status,
  check_in_at timestamp with time zone,
  check_out_at timestamp with time zone,
  check_in_by uuid,
  check_out_by uuid,
  check_in_geog USER-DEFINED,
  check_out_geog USER-DEFINED,
  minutes integer CHECK (minutes IS NULL OR minutes >= 0),
  points_awarded integer,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT joins_pkey PRIMARY KEY (id),
  CONSTRAINT joins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT joins_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT joins_check_in_by_fkey FOREIGN KEY (check_in_by) REFERENCES public.profiles(id),
  CONSTRAINT joins_check_out_by_fkey FOREIGN KEY (check_out_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.org_members (
  org_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role USER-DEFINED NOT NULL,
  CONSTRAINT org_members_pkey PRIMARY KEY (org_id, user_id),
  CONSTRAINT org_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT org_members_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.organizations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  email USER-DEFINED,
  phone text,
  owner_user_id uuid NOT NULL,
  verified boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT organizations_pkey PRIMARY KEY (id),
  CONSTRAINT organizations_owner_user_id_fkey FOREIGN KEY (owner_user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.points_ledger (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  join_id uuid,
  delta_points integer NOT NULL,
  reason text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  hours integer DEFAULT 0,
  CONSTRAINT points_ledger_pkey PRIMARY KEY (id),
  CONSTRAINT points_ledger_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT points_ledger_join_id_fkey FOREIGN KEY (join_id) REFERENCES public.joins(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  display_name text,
  avatar_url text,
  role text NOT NULL DEFAULT 'volunteer'::text CHECK (role = ANY (ARRAY['volunteer'::text, 'organizer'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  phone_number text,
  bio text,
  location text,
  birth_date date,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.spatial_ref_sys (
  srid integer NOT NULL CHECK (srid > 0 AND srid <= 998999),
  auth_name character varying,
  auth_srid integer,
  srtext character varying,
  proj4text character varying,
  CONSTRAINT spatial_ref_sys_pkey PRIMARY KEY (srid)
);
CREATE TABLE public.tags (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  slug text NOT NULL UNIQUE,
  name text NOT NULL,
  CONSTRAINT tags_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_badges (
  user_id uuid NOT NULL,
  badge_id uuid NOT NULL,
  awarded_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_badges_pkey PRIMARY KEY (user_id, badge_id),
  CONSTRAINT user_badges_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_badges_badge_id_fkey FOREIGN KEY (badge_id) REFERENCES public.badges(id)
);
